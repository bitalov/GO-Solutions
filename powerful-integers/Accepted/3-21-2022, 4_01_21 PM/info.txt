{"id":664414929,"lang":"golang","time":"1 hour, 4 minutes","timestamp":1647874881,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/664414929/","is_pending":"Not Pending","title":"Powerful Integers","memory":"2.2 MB","code":"\nfunc   removeRepeated(nums []int) []int {\n\tsort.Ints(nums)\n\n\tsize := len(nums)\n\n\tlast, j := -1, -1\n\tfor i := 0; i < size; i++ {\n\t\tif last == nums[i] { // nums[i]>0 for any i\n\t\t\tcontinue\n\t\t}\n\t\tj++\n\t\tnums[j], last = nums[i], nums[i]\n\t}\n\treturn nums[:j+1]\n}\n\nfunc powerfulIntegers(x int, y int, bound int) []int {\n    \tif x == 1 {\n\t\tx = bound + 1\n\t}\n\tif y == 1 {\n\t\ty = bound + 1\n\t}\n\n\tres := make([]int, 0, 128)\n\tfor i := 1; i < bound; i *= x {\n\t\tfor j := 1; i+j <= bound; j *= y {\n\t\t\tres = append(res, i+j)\n\t\t}\n\t}\n\n\treturn removeRepeated(res)\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"powerful-integers"}
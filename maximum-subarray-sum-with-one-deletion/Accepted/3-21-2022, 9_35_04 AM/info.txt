{"id":664263286,"lang":"golang","time":"7 hours, 31 minutes","timestamp":1647851704,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/664263286/","is_pending":"Not Pending","title":"Maximum Subarray Sum with One Deletion","memory":"8.7 MB","code":"func maximumSum(A []int) int {\n\tn := len(A)\n\tmaxRightIs := make([]int, n)\n\tmaxLeftIs := make([]int, n)\n\tmaxRightIs[0] = A[0]\n\tmaxLeftIs[n-1] = A[n-1]\n\tres := A[0]\n\tfor i := 1; i < n; i++ {\n\t\tmaxRightIs[i] = max(A[i], maxRightIs[i-1]+A[i])\n\t\tj := n - i - 1\n\t\tmaxLeftIs[j] = max(A[j], A[j]+maxLeftIs[j+1])\n\t\t// 最大的子数组，也有可能是仅由一段组成\n\t\tres = max(res, maxRightIs[i])\n\t}\n\tfor i := 1; i < n-1; i++ {\n\t\tres = max(res, maxRightIs[i-1]+maxLeftIs[i+1])\n\t}\n\treturn res\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}","compare_result":"111111111111111111111111111111111111","title_slug":"maximum-subarray-sum-with-one-deletion"}
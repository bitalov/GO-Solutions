{"id":664262038,"lang":"golang","time":"7 hours, 34 minutes","timestamp":1647851496,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/664262038/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"package leetcode\n\ntype LRUCache struct {\n\thead, tail *Node\n\tKeys       map[int]*Node\n\tCap        int\n}\n\ntype Node struct {\n\tKey, Val   int\n\tPrev, Next *Node\n}\n\nfunc Constructor(capacity int) LRUCache {\n\treturn LRUCache{Keys: make(map[int]*Node), Cap: capacity}\n}\n\nfunc (this *LRUCache) Get(key int) int {\n\tif node, ok := this.Keys[key]; ok {\n\t\tthis.Remove(node)\n\t\tthis.Add(node)\n\t\treturn node.Val\n\t}\n\treturn -1\n}\n\nfunc (this *LRUCache) Put(key int, value int) {\n\tif node, ok := this.Keys[key]; ok {\n\t\tnode.Val = value\n\t\tthis.Remove(node)\n\t\tthis.Add(node)\n\t\treturn\n\t} else {\n\t\tnode = &Node{Key: key, Val: value}\n\t\tthis.Keys[key] = node\n\t\tthis.Add(node)\n\t}\n\tif len(this.Keys) > this.Cap {\n\t\tdelete(this.Keys, this.tail.Key)\n\t\tthis.Remove(this.tail)\n\t}\n}\n\nfunc (this *LRUCache) Add(node *Node) {\n\tnode.Prev = nil\n\tnode.Next = this.head\n\tif this.head != nil {\n\t\tthis.head.Prev = node\n\t}\n\tthis.head = node\n\tif this.tail == nil {\n\t\tthis.tail = node\n\t\tthis.tail.Next = nil\n\t}\n}\n\nfunc (this *LRUCache) Remove(node *Node) {\n\tif node == this.head {\n\t\tthis.head = node.Next\n\t\tnode.Next = nil\n\t\treturn\n\t}\n\tif node == this.tail {\n\t\tthis.tail = node.Prev\n\t\tnode.Prev.Next = nil\n\t\tnode.Prev = nil\n\t\treturn\n\t}\n\tnode.Prev.Next = node.Next\n\tnode.Next.Prev = node.Prev\n}","compare_result":null,"title_slug":"lru-cache"}